// Generated by gencpp from file mavros_msgs/ActuatorArmed.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_ACTUATORARMED_H
#define MAVROS_MSGS_MESSAGE_ACTUATORARMED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavros_msgs
{
template <class ContainerAllocator>
struct ActuatorArmed_
{
  typedef ActuatorArmed_<ContainerAllocator> Type;

  ActuatorArmed_()
    : header()
    , armed(false)
    , prearmed(false)
    , ready_to_arm(false)
    , lockdown(false)
    , manual_lockdown(false)
    , force_failsafe(false)
    , in_esc_calibration_mode(false)  {
    }
  ActuatorArmed_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , armed(false)
    , prearmed(false)
    , ready_to_arm(false)
    , lockdown(false)
    , manual_lockdown(false)
    , force_failsafe(false)
    , in_esc_calibration_mode(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _armed_type;
  _armed_type armed;

   typedef uint8_t _prearmed_type;
  _prearmed_type prearmed;

   typedef uint8_t _ready_to_arm_type;
  _ready_to_arm_type ready_to_arm;

   typedef uint8_t _lockdown_type;
  _lockdown_type lockdown;

   typedef uint8_t _manual_lockdown_type;
  _manual_lockdown_type manual_lockdown;

   typedef uint8_t _force_failsafe_type;
  _force_failsafe_type force_failsafe;

   typedef uint8_t _in_esc_calibration_mode_type;
  _in_esc_calibration_mode_type in_esc_calibration_mode;





  typedef boost::shared_ptr< ::mavros_msgs::ActuatorArmed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::ActuatorArmed_<ContainerAllocator> const> ConstPtr;

}; // struct ActuatorArmed_

typedef ::mavros_msgs::ActuatorArmed_<std::allocator<void> > ActuatorArmed;

typedef boost::shared_ptr< ::mavros_msgs::ActuatorArmed > ActuatorArmedPtr;
typedef boost::shared_ptr< ::mavros_msgs::ActuatorArmed const> ActuatorArmedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::ActuatorArmed_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::ActuatorArmed_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::ActuatorArmed_<ContainerAllocator1> & lhs, const ::mavros_msgs::ActuatorArmed_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.armed == rhs.armed &&
    lhs.prearmed == rhs.prearmed &&
    lhs.ready_to_arm == rhs.ready_to_arm &&
    lhs.lockdown == rhs.lockdown &&
    lhs.manual_lockdown == rhs.manual_lockdown &&
    lhs.force_failsafe == rhs.force_failsafe &&
    lhs.in_esc_calibration_mode == rhs.in_esc_calibration_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::ActuatorArmed_<ContainerAllocator1> & lhs, const ::mavros_msgs::ActuatorArmed_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::ActuatorArmed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::ActuatorArmed_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::ActuatorArmed_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::ActuatorArmed_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::ActuatorArmed_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::ActuatorArmed_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::ActuatorArmed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d55cb16f374a48b3ea98e9549ab9ec79";
  }

  static const char* value(const ::mavros_msgs::ActuatorArmed_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd55cb16f374a48b3ULL;
  static const uint64_t static_value2 = 0xea98e9549ab9ec79ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::ActuatorArmed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/ActuatorArmed";
  }

  static const char* value(const ::mavros_msgs::ActuatorArmed_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::ActuatorArmed_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Represent Actuator Armed.\n"
"#\n"
"# ACTUATOR_ARMED message\n"
"\n"
"std_msgs/Header header\n"
"\n"
"bool armed		# Set to true if system is armed\n"
"bool prearmed		# Set to true if the actuator safety is disabled but motors are not armed\n"
"bool ready_to_arm	# Set to true if system is ready to be armed\n"
"bool lockdown		# Set to true if actuators are forced to being disabled (due to emergency or HIL)\n"
"bool manual_lockdown    # Set to true if manual throttle kill switch is engaged\n"
"bool force_failsafe	# Set to true if the actuators are forced to the failsafe position\n"
"bool in_esc_calibration_mode # IO/FMU should ignore messages from the actuator controls topics\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavros_msgs::ActuatorArmed_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::ActuatorArmed_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.armed);
      stream.next(m.prearmed);
      stream.next(m.ready_to_arm);
      stream.next(m.lockdown);
      stream.next(m.manual_lockdown);
      stream.next(m.force_failsafe);
      stream.next(m.in_esc_calibration_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActuatorArmed_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::ActuatorArmed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::ActuatorArmed_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "armed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.armed);
    s << indent << "prearmed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.prearmed);
    s << indent << "ready_to_arm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ready_to_arm);
    s << indent << "lockdown: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lockdown);
    s << indent << "manual_lockdown: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.manual_lockdown);
    s << indent << "force_failsafe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.force_failsafe);
    s << indent << "in_esc_calibration_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.in_esc_calibration_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_ACTUATORARMED_H
