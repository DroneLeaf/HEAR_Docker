// Generated by gencpp from file mavros_msgs/VehicleStatus.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_VEHICLESTATUS_H
#define MAVROS_MSGS_MESSAGE_VEHICLESTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavros_msgs
{
template <class ContainerAllocator>
struct VehicleStatus_
{
  typedef VehicleStatus_<ContainerAllocator> Type;

  VehicleStatus_()
    : header()
    , armed_time(0)
    , takeoff_time(0)
    , arming_state(0)
    , latest_arming_reason(0)
    , latest_disarming_reason(0)
    , nav_state_timestamp(0)
    , nav_state_user_intention(0)
    , nav_state(0)
    , failure_detector_status(0)
    , hil_state(0)
    , vehicle_type(0)
    , failsafe(false)
    , failsafe_and_user_took_over(false)
    , gcs_connection_lost(false)
    , gcs_connection_lost_counter(0)
    , high_latency_data_link_lost(false)
    , is_vtol(false)
    , is_vtol_tailsitter(false)
    , in_transition_mode(false)
    , in_transition_to_fw(false)  {
    }
  VehicleStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , armed_time(0)
    , takeoff_time(0)
    , arming_state(0)
    , latest_arming_reason(0)
    , latest_disarming_reason(0)
    , nav_state_timestamp(0)
    , nav_state_user_intention(0)
    , nav_state(0)
    , failure_detector_status(0)
    , hil_state(0)
    , vehicle_type(0)
    , failsafe(false)
    , failsafe_and_user_took_over(false)
    , gcs_connection_lost(false)
    , gcs_connection_lost_counter(0)
    , high_latency_data_link_lost(false)
    , is_vtol(false)
    , is_vtol_tailsitter(false)
    , in_transition_mode(false)
    , in_transition_to_fw(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _armed_time_type;
  _armed_time_type armed_time;

   typedef uint64_t _takeoff_time_type;
  _takeoff_time_type takeoff_time;

   typedef uint8_t _arming_state_type;
  _arming_state_type arming_state;

   typedef uint8_t _latest_arming_reason_type;
  _latest_arming_reason_type latest_arming_reason;

   typedef uint8_t _latest_disarming_reason_type;
  _latest_disarming_reason_type latest_disarming_reason;

   typedef uint64_t _nav_state_timestamp_type;
  _nav_state_timestamp_type nav_state_timestamp;

   typedef uint8_t _nav_state_user_intention_type;
  _nav_state_user_intention_type nav_state_user_intention;

   typedef uint8_t _nav_state_type;
  _nav_state_type nav_state;

   typedef uint16_t _failure_detector_status_type;
  _failure_detector_status_type failure_detector_status;

   typedef uint8_t _hil_state_type;
  _hil_state_type hil_state;

   typedef uint8_t _vehicle_type_type;
  _vehicle_type_type vehicle_type;

   typedef uint8_t _failsafe_type;
  _failsafe_type failsafe;

   typedef uint8_t _failsafe_and_user_took_over_type;
  _failsafe_and_user_took_over_type failsafe_and_user_took_over;

   typedef uint8_t _gcs_connection_lost_type;
  _gcs_connection_lost_type gcs_connection_lost;

   typedef uint8_t _gcs_connection_lost_counter_type;
  _gcs_connection_lost_counter_type gcs_connection_lost_counter;

   typedef uint8_t _high_latency_data_link_lost_type;
  _high_latency_data_link_lost_type high_latency_data_link_lost;

   typedef uint8_t _is_vtol_type;
  _is_vtol_type is_vtol;

   typedef uint8_t _is_vtol_tailsitter_type;
  _is_vtol_tailsitter_type is_vtol_tailsitter;

   typedef uint8_t _in_transition_mode_type;
  _in_transition_mode_type in_transition_mode;

   typedef uint8_t _in_transition_to_fw_type;
  _in_transition_to_fw_type in_transition_to_fw;





  typedef boost::shared_ptr< ::mavros_msgs::VehicleStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::VehicleStatus_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleStatus_

typedef ::mavros_msgs::VehicleStatus_<std::allocator<void> > VehicleStatus;

typedef boost::shared_ptr< ::mavros_msgs::VehicleStatus > VehicleStatusPtr;
typedef boost::shared_ptr< ::mavros_msgs::VehicleStatus const> VehicleStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::VehicleStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::VehicleStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::VehicleStatus_<ContainerAllocator1> & lhs, const ::mavros_msgs::VehicleStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.armed_time == rhs.armed_time &&
    lhs.takeoff_time == rhs.takeoff_time &&
    lhs.arming_state == rhs.arming_state &&
    lhs.latest_arming_reason == rhs.latest_arming_reason &&
    lhs.latest_disarming_reason == rhs.latest_disarming_reason &&
    lhs.nav_state_timestamp == rhs.nav_state_timestamp &&
    lhs.nav_state_user_intention == rhs.nav_state_user_intention &&
    lhs.nav_state == rhs.nav_state &&
    lhs.failure_detector_status == rhs.failure_detector_status &&
    lhs.hil_state == rhs.hil_state &&
    lhs.vehicle_type == rhs.vehicle_type &&
    lhs.failsafe == rhs.failsafe &&
    lhs.failsafe_and_user_took_over == rhs.failsafe_and_user_took_over &&
    lhs.gcs_connection_lost == rhs.gcs_connection_lost &&
    lhs.gcs_connection_lost_counter == rhs.gcs_connection_lost_counter &&
    lhs.high_latency_data_link_lost == rhs.high_latency_data_link_lost &&
    lhs.is_vtol == rhs.is_vtol &&
    lhs.is_vtol_tailsitter == rhs.is_vtol_tailsitter &&
    lhs.in_transition_mode == rhs.in_transition_mode &&
    lhs.in_transition_to_fw == rhs.in_transition_to_fw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::VehicleStatus_<ContainerAllocator1> & lhs, const ::mavros_msgs::VehicleStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::VehicleStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::VehicleStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::VehicleStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::VehicleStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::VehicleStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::VehicleStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::VehicleStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df0c7b73ac1ff37bdc4a5932b27da7a7";
  }

  static const char* value(const ::mavros_msgs::VehicleStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf0c7b73ac1ff37bULL;
  static const uint64_t static_value2 = 0xdc4a5932b27da7a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::VehicleStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/VehicleStatus";
  }

  static const char* value(const ::mavros_msgs::VehicleStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::VehicleStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Represent Vehicle Status.\n"
"#\n"
"# VEHICLE_Status message\n"
"\n"
"std_msgs/Header header\n"
"uint64 armed_time # Arming timestamp (microseconds)\n"
"uint64 takeoff_time # Takeoff timestamp (microseconds)\n"
"\n"
"uint8 arming_state\n"
"\n"
"uint8 latest_arming_reason\n"
"uint8 latest_disarming_reason\n"
"\n"
"uint64 nav_state_timestamp # time when current nav_state activated\n"
"\n"
"uint8 nav_state_user_intention                  # Mode that the user selected (might be different from nav_state in a failsafe situation)\n"
"\n"
"uint8 nav_state                                 # Currently active mode\n"
"\n"
"# Bitmask of detected failures\n"
"uint16 failure_detector_status\n"
"\n"
"uint8 hil_state\n"
"\n"
"# If it's a VTOL, then the value will be VEHICLE_TYPE_ROTARY_WING while flying as a multicopter, and VEHICLE_TYPE_FIXED_WING when flying as a fixed-wing\n"
"uint8 vehicle_type\n"
"\n"
"bool failsafe # true if system is in failsafe state (e.g.:RTL, Hover, Terminate, ...)\n"
"bool failsafe_and_user_took_over # true if system is in failsafe state but the user took over control\n"
"\n"
"# Link loss\n"
"bool gcs_connection_lost              # datalink to GCS lost\n"
"uint8 gcs_connection_lost_counter     # counts unique GCS connection lost events\n"
"bool high_latency_data_link_lost # Set to true if the high latency data link (eg. RockBlock Iridium 9603 telemetry module) is lost\n"
"\n"
"# VTOL flags\n"
"bool is_vtol             # True if the system is VTOL capable\n"
"bool is_vtol_tailsitter  # True if the system performs a 90Â° pitch down rotation during transition from MC to FW\n"
"bool in_transition_mode  # True if VTOL is doing a transition\n"
"bool in_transition_to_fw # True if VTOL is doing a transition from MC to FW\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavros_msgs::VehicleStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::VehicleStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.armed_time);
      stream.next(m.takeoff_time);
      stream.next(m.arming_state);
      stream.next(m.latest_arming_reason);
      stream.next(m.latest_disarming_reason);
      stream.next(m.nav_state_timestamp);
      stream.next(m.nav_state_user_intention);
      stream.next(m.nav_state);
      stream.next(m.failure_detector_status);
      stream.next(m.hil_state);
      stream.next(m.vehicle_type);
      stream.next(m.failsafe);
      stream.next(m.failsafe_and_user_took_over);
      stream.next(m.gcs_connection_lost);
      stream.next(m.gcs_connection_lost_counter);
      stream.next(m.high_latency_data_link_lost);
      stream.next(m.is_vtol);
      stream.next(m.is_vtol_tailsitter);
      stream.next(m.in_transition_mode);
      stream.next(m.in_transition_to_fw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::VehicleStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::VehicleStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "armed_time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.armed_time);
    s << indent << "takeoff_time: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.takeoff_time);
    s << indent << "arming_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arming_state);
    s << indent << "latest_arming_reason: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.latest_arming_reason);
    s << indent << "latest_disarming_reason: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.latest_disarming_reason);
    s << indent << "nav_state_timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.nav_state_timestamp);
    s << indent << "nav_state_user_intention: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.nav_state_user_intention);
    s << indent << "nav_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.nav_state);
    s << indent << "failure_detector_status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.failure_detector_status);
    s << indent << "hil_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hil_state);
    s << indent << "vehicle_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vehicle_type);
    s << indent << "failsafe: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failsafe);
    s << indent << "failsafe_and_user_took_over: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.failsafe_and_user_took_over);
    s << indent << "gcs_connection_lost: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gcs_connection_lost);
    s << indent << "gcs_connection_lost_counter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gcs_connection_lost_counter);
    s << indent << "high_latency_data_link_lost: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.high_latency_data_link_lost);
    s << indent << "is_vtol: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_vtol);
    s << indent << "is_vtol_tailsitter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_vtol_tailsitter);
    s << indent << "in_transition_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.in_transition_mode);
    s << indent << "in_transition_to_fw: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.in_transition_to_fw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_VEHICLESTATUS_H
