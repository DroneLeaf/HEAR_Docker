// Generated by gencpp from file mavros_msgs/VehicleLocalPosition.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_VEHICLELOCALPOSITION_H
#define MAVROS_MSGS_MESSAGE_VEHICLELOCALPOSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavros_msgs
{
template <class ContainerAllocator>
struct VehicleLocalPosition_
{
  typedef VehicleLocalPosition_<ContainerAllocator> Type;

  VehicleLocalPosition_()
    : header()
    , xy_valid(false)
    , z_valid(false)
    , v_xy_valid(false)
    , v_z_valid(false)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , delta_xy()
    , xy_reset_counter(0)
    , delta_z(0.0)
    , z_reset_counter(0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , z_deriv(0.0)
    , delta_vxy()
    , vxy_reset_counter(0)
    , delta_vz(0.0)
    , vz_reset_counter(0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)
    , xy_global(false)
    , z_global(false)
    , ref_lat(0.0)
    , ref_lon(0.0)
    , ref_alt(0.0)
    , dist_bottom(0.0)
    , dist_bottom_valid(false)
    , dist_bottom_sensor_bitfield(0)
    , eph(0.0)
    , epv(0.0)
    , evh(0.0)
    , evv(0.0)
    , dead_reckoning(false)
    , vxy_max(0.0)
    , vz_max(0.0)
    , hagl_min(0.0)
    , hagl_max(0.0)  {
      delta_xy.assign(0.0);

      delta_vxy.assign(0.0);
  }
  VehicleLocalPosition_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , xy_valid(false)
    , z_valid(false)
    , v_xy_valid(false)
    , v_z_valid(false)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , delta_xy()
    , xy_reset_counter(0)
    , delta_z(0.0)
    , z_reset_counter(0)
    , vx(0.0)
    , vy(0.0)
    , vz(0.0)
    , z_deriv(0.0)
    , delta_vxy()
    , vxy_reset_counter(0)
    , delta_vz(0.0)
    , vz_reset_counter(0)
    , ax(0.0)
    , ay(0.0)
    , az(0.0)
    , xy_global(false)
    , z_global(false)
    , ref_lat(0.0)
    , ref_lon(0.0)
    , ref_alt(0.0)
    , dist_bottom(0.0)
    , dist_bottom_valid(false)
    , dist_bottom_sensor_bitfield(0)
    , eph(0.0)
    , epv(0.0)
    , evh(0.0)
    , evv(0.0)
    , dead_reckoning(false)
    , vxy_max(0.0)
    , vz_max(0.0)
    , hagl_min(0.0)
    , hagl_max(0.0)  {
  (void)_alloc;
      delta_xy.assign(0.0);

      delta_vxy.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _xy_valid_type;
  _xy_valid_type xy_valid;

   typedef uint8_t _z_valid_type;
  _z_valid_type z_valid;

   typedef uint8_t _v_xy_valid_type;
  _v_xy_valid_type v_xy_valid;

   typedef uint8_t _v_z_valid_type;
  _v_z_valid_type v_z_valid;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _z_type;
  _z_type z;

   typedef boost::array<float, 2>  _delta_xy_type;
  _delta_xy_type delta_xy;

   typedef uint8_t _xy_reset_counter_type;
  _xy_reset_counter_type xy_reset_counter;

   typedef float _delta_z_type;
  _delta_z_type delta_z;

   typedef uint8_t _z_reset_counter_type;
  _z_reset_counter_type z_reset_counter;

   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef float _vz_type;
  _vz_type vz;

   typedef float _z_deriv_type;
  _z_deriv_type z_deriv;

   typedef boost::array<float, 2>  _delta_vxy_type;
  _delta_vxy_type delta_vxy;

   typedef uint8_t _vxy_reset_counter_type;
  _vxy_reset_counter_type vxy_reset_counter;

   typedef float _delta_vz_type;
  _delta_vz_type delta_vz;

   typedef uint8_t _vz_reset_counter_type;
  _vz_reset_counter_type vz_reset_counter;

   typedef float _ax_type;
  _ax_type ax;

   typedef float _ay_type;
  _ay_type ay;

   typedef float _az_type;
  _az_type az;

   typedef uint8_t _xy_global_type;
  _xy_global_type xy_global;

   typedef uint8_t _z_global_type;
  _z_global_type z_global;

   typedef double _ref_lat_type;
  _ref_lat_type ref_lat;

   typedef double _ref_lon_type;
  _ref_lon_type ref_lon;

   typedef float _ref_alt_type;
  _ref_alt_type ref_alt;

   typedef float _dist_bottom_type;
  _dist_bottom_type dist_bottom;

   typedef uint8_t _dist_bottom_valid_type;
  _dist_bottom_valid_type dist_bottom_valid;

   typedef uint8_t _dist_bottom_sensor_bitfield_type;
  _dist_bottom_sensor_bitfield_type dist_bottom_sensor_bitfield;

   typedef float _eph_type;
  _eph_type eph;

   typedef float _epv_type;
  _epv_type epv;

   typedef float _evh_type;
  _evh_type evh;

   typedef float _evv_type;
  _evv_type evv;

   typedef uint8_t _dead_reckoning_type;
  _dead_reckoning_type dead_reckoning;

   typedef float _vxy_max_type;
  _vxy_max_type vxy_max;

   typedef float _vz_max_type;
  _vz_max_type vz_max;

   typedef float _hagl_min_type;
  _hagl_min_type hagl_min;

   typedef float _hagl_max_type;
  _hagl_max_type hagl_max;





  typedef boost::shared_ptr< ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleLocalPosition_

typedef ::mavros_msgs::VehicleLocalPosition_<std::allocator<void> > VehicleLocalPosition;

typedef boost::shared_ptr< ::mavros_msgs::VehicleLocalPosition > VehicleLocalPositionPtr;
typedef boost::shared_ptr< ::mavros_msgs::VehicleLocalPosition const> VehicleLocalPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator1> & lhs, const ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.xy_valid == rhs.xy_valid &&
    lhs.z_valid == rhs.z_valid &&
    lhs.v_xy_valid == rhs.v_xy_valid &&
    lhs.v_z_valid == rhs.v_z_valid &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.delta_xy == rhs.delta_xy &&
    lhs.xy_reset_counter == rhs.xy_reset_counter &&
    lhs.delta_z == rhs.delta_z &&
    lhs.z_reset_counter == rhs.z_reset_counter &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.vz == rhs.vz &&
    lhs.z_deriv == rhs.z_deriv &&
    lhs.delta_vxy == rhs.delta_vxy &&
    lhs.vxy_reset_counter == rhs.vxy_reset_counter &&
    lhs.delta_vz == rhs.delta_vz &&
    lhs.vz_reset_counter == rhs.vz_reset_counter &&
    lhs.ax == rhs.ax &&
    lhs.ay == rhs.ay &&
    lhs.az == rhs.az &&
    lhs.xy_global == rhs.xy_global &&
    lhs.z_global == rhs.z_global &&
    lhs.ref_lat == rhs.ref_lat &&
    lhs.ref_lon == rhs.ref_lon &&
    lhs.ref_alt == rhs.ref_alt &&
    lhs.dist_bottom == rhs.dist_bottom &&
    lhs.dist_bottom_valid == rhs.dist_bottom_valid &&
    lhs.dist_bottom_sensor_bitfield == rhs.dist_bottom_sensor_bitfield &&
    lhs.eph == rhs.eph &&
    lhs.epv == rhs.epv &&
    lhs.evh == rhs.evh &&
    lhs.evv == rhs.evv &&
    lhs.dead_reckoning == rhs.dead_reckoning &&
    lhs.vxy_max == rhs.vxy_max &&
    lhs.vz_max == rhs.vz_max &&
    lhs.hagl_min == rhs.hagl_min &&
    lhs.hagl_max == rhs.hagl_max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator1> & lhs, const ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5c86ca1da7b8d4cc9998c1f1e0bdc02";
  }

  static const char* value(const ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5c86ca1da7b8d4cULL;
  static const uint64_t static_value2 = 0xc9998c1f1e0bdc02ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/VehicleLocalPosition";
  }

  static const char* value(const ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Represent Vehicle Local Position.\n"
"#\n"
"# VEHICLE_LOCAL_POSITION message\n"
"\n"
"std_msgs/Header header\n"
"bool xy_valid				# true if x and y are valid\n"
"bool z_valid				# true if z is valid\n"
"bool v_xy_valid				# true if vx and vy are valid\n"
"bool v_z_valid				# true if vz is valid\n"
"\n"
"# Position in local NED frame\n"
"float32 x				# North position in NED earth-fixed frame, (metres)\n"
"float32 y				# East position in NED earth-fixed frame, (metres)\n"
"float32 z				# Down position (negative altitude) in NED earth-fixed frame, (metres)\n"
"\n"
"# Position reset delta\n"
"float32[2] delta_xy\n"
"uint8 xy_reset_counter\n"
"\n"
"float32 delta_z\n"
"uint8 z_reset_counter\n"
"\n"
"# Velocity in NED frame\n"
"float32 vx 				# North velocity in NED earth-fixed frame, (metres/sec)\n"
"float32 vy				# East velocity in NED earth-fixed frame, (metres/sec)\n"
"float32 vz				# Down velocity in NED earth-fixed frame, (metres/sec)\n"
"float32 z_deriv				# Down position time derivative in NED earth-fixed frame, (metres/sec)\n"
"\n"
"# Velocity reset delta\n"
"float32[2] delta_vxy\n"
"uint8 vxy_reset_counter\n"
"\n"
"float32 delta_vz\n"
"uint8 vz_reset_counter\n"
"# Acceleration in NED frame\n"
"float32 ax        # North velocity derivative in NED earth-fixed frame, (metres/sec^2)\n"
"float32 ay        # East velocity derivative in NED earth-fixed frame, (metres/sec^2)\n"
"float32 az        # Down velocity derivative in NED earth-fixed frame, (metres/sec^2)\n"
"\n"
"# Position of reference point (local NED frame origin) in global (GPS / WGS84) frame\n"
"bool xy_global				# true if position (x, y) has a valid global reference (ref_lat, ref_lon)\n"
"bool z_global				# true if z has a valid global reference (ref_alt)\n"
"float64 ref_lat				# Reference point latitude, (degrees)\n"
"float64 ref_lon				# Reference point longitude, (degrees)\n"
"float32 ref_alt				# Reference altitude AMSL, (metres)\n"
"\n"
"# Distance to surface\n"
"float32 dist_bottom			# Distance from from bottom surface to ground, (metres)\n"
"bool dist_bottom_valid			# true if distance to bottom surface is valid\n"
"uint8 dist_bottom_sensor_bitfield	# bitfield indicating what type of sensor is used to estimate dist_bottom\n"
"\n"
"float32 eph				# Standard deviation of horizontal position error, (metres)\n"
"float32 epv				# Standard deviation of vertical position error, (metres)\n"
"float32 evh				# Standard deviation of horizontal velocity error, (metres/sec)\n"
"float32 evv				# Standard deviation of vertical velocity error, (metres/sec)\n"
"\n"
"bool dead_reckoning                     # True if this position is estimated through dead-reckoning\n"
"\n"
"# estimator specified vehicle limits\n"
"float32 vxy_max				# maximum horizontal speed - set to 0 when limiting not required (meters/sec)\n"
"float32 vz_max				# maximum vertical speed - set to 0 when limiting not required (meters/sec)\n"
"float32 hagl_min			# minimum height above ground level - set to 0 when limiting not required (meters)\n"
"float32 hagl_max			# maximum height above ground level - set to 0 when limiting not required (meters)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.xy_valid);
      stream.next(m.z_valid);
      stream.next(m.v_xy_valid);
      stream.next(m.v_z_valid);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.delta_xy);
      stream.next(m.xy_reset_counter);
      stream.next(m.delta_z);
      stream.next(m.z_reset_counter);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.vz);
      stream.next(m.z_deriv);
      stream.next(m.delta_vxy);
      stream.next(m.vxy_reset_counter);
      stream.next(m.delta_vz);
      stream.next(m.vz_reset_counter);
      stream.next(m.ax);
      stream.next(m.ay);
      stream.next(m.az);
      stream.next(m.xy_global);
      stream.next(m.z_global);
      stream.next(m.ref_lat);
      stream.next(m.ref_lon);
      stream.next(m.ref_alt);
      stream.next(m.dist_bottom);
      stream.next(m.dist_bottom_valid);
      stream.next(m.dist_bottom_sensor_bitfield);
      stream.next(m.eph);
      stream.next(m.epv);
      stream.next(m.evh);
      stream.next(m.evv);
      stream.next(m.dead_reckoning);
      stream.next(m.vxy_max);
      stream.next(m.vz_max);
      stream.next(m.hagl_min);
      stream.next(m.hagl_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleLocalPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::VehicleLocalPosition_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "xy_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.xy_valid);
    s << indent << "z_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.z_valid);
    s << indent << "v_xy_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.v_xy_valid);
    s << indent << "v_z_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.v_z_valid);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "delta_xy[]" << std::endl;
    for (size_t i = 0; i < v.delta_xy.size(); ++i)
    {
      s << indent << "  delta_xy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.delta_xy[i]);
    }
    s << indent << "xy_reset_counter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.xy_reset_counter);
    s << indent << "delta_z: ";
    Printer<float>::stream(s, indent + "  ", v.delta_z);
    s << indent << "z_reset_counter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.z_reset_counter);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "vz: ";
    Printer<float>::stream(s, indent + "  ", v.vz);
    s << indent << "z_deriv: ";
    Printer<float>::stream(s, indent + "  ", v.z_deriv);
    s << indent << "delta_vxy[]" << std::endl;
    for (size_t i = 0; i < v.delta_vxy.size(); ++i)
    {
      s << indent << "  delta_vxy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.delta_vxy[i]);
    }
    s << indent << "vxy_reset_counter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vxy_reset_counter);
    s << indent << "delta_vz: ";
    Printer<float>::stream(s, indent + "  ", v.delta_vz);
    s << indent << "vz_reset_counter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vz_reset_counter);
    s << indent << "ax: ";
    Printer<float>::stream(s, indent + "  ", v.ax);
    s << indent << "ay: ";
    Printer<float>::stream(s, indent + "  ", v.ay);
    s << indent << "az: ";
    Printer<float>::stream(s, indent + "  ", v.az);
    s << indent << "xy_global: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.xy_global);
    s << indent << "z_global: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.z_global);
    s << indent << "ref_lat: ";
    Printer<double>::stream(s, indent + "  ", v.ref_lat);
    s << indent << "ref_lon: ";
    Printer<double>::stream(s, indent + "  ", v.ref_lon);
    s << indent << "ref_alt: ";
    Printer<float>::stream(s, indent + "  ", v.ref_alt);
    s << indent << "dist_bottom: ";
    Printer<float>::stream(s, indent + "  ", v.dist_bottom);
    s << indent << "dist_bottom_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dist_bottom_valid);
    s << indent << "dist_bottom_sensor_bitfield: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dist_bottom_sensor_bitfield);
    s << indent << "eph: ";
    Printer<float>::stream(s, indent + "  ", v.eph);
    s << indent << "epv: ";
    Printer<float>::stream(s, indent + "  ", v.epv);
    s << indent << "evh: ";
    Printer<float>::stream(s, indent + "  ", v.evh);
    s << indent << "evv: ";
    Printer<float>::stream(s, indent + "  ", v.evv);
    s << indent << "dead_reckoning: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dead_reckoning);
    s << indent << "vxy_max: ";
    Printer<float>::stream(s, indent + "  ", v.vxy_max);
    s << indent << "vz_max: ";
    Printer<float>::stream(s, indent + "  ", v.vz_max);
    s << indent << "hagl_min: ";
    Printer<float>::stream(s, indent + "  ", v.hagl_min);
    s << indent << "hagl_max: ";
    Printer<float>::stream(s, indent + "  ", v.hagl_max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_VEHICLELOCALPOSITION_H
