// Generated by gencpp from file mavros_msgs/VehicleControlMode.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_VEHICLECONTROLMODE_H
#define MAVROS_MSGS_MESSAGE_VEHICLECONTROLMODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavros_msgs
{
template <class ContainerAllocator>
struct VehicleControlMode_
{
  typedef VehicleControlMode_<ContainerAllocator> Type;

  VehicleControlMode_()
    : header()
    , flag_armed(false)
    , flag_multicopter_position_control_enabled(false)
    , flag_control_manual_enabled(false)
    , flag_control_auto_enabled(false)
    , flag_control_offboard_enabled(false)
    , flag_control_rates_enabled(false)
    , flag_control_attitude_enabled(false)
    , flag_control_acceleration_enabled(false)
    , flag_control_velocity_enabled(false)
    , flag_control_position_enabled(false)
    , flag_control_altitude_enabled(false)
    , flag_control_climb_rate_enabled(false)
    , flag_control_termination_enabled(false)  {
    }
  VehicleControlMode_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , flag_armed(false)
    , flag_multicopter_position_control_enabled(false)
    , flag_control_manual_enabled(false)
    , flag_control_auto_enabled(false)
    , flag_control_offboard_enabled(false)
    , flag_control_rates_enabled(false)
    , flag_control_attitude_enabled(false)
    , flag_control_acceleration_enabled(false)
    , flag_control_velocity_enabled(false)
    , flag_control_position_enabled(false)
    , flag_control_altitude_enabled(false)
    , flag_control_climb_rate_enabled(false)
    , flag_control_termination_enabled(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _flag_armed_type;
  _flag_armed_type flag_armed;

   typedef uint8_t _flag_multicopter_position_control_enabled_type;
  _flag_multicopter_position_control_enabled_type flag_multicopter_position_control_enabled;

   typedef uint8_t _flag_control_manual_enabled_type;
  _flag_control_manual_enabled_type flag_control_manual_enabled;

   typedef uint8_t _flag_control_auto_enabled_type;
  _flag_control_auto_enabled_type flag_control_auto_enabled;

   typedef uint8_t _flag_control_offboard_enabled_type;
  _flag_control_offboard_enabled_type flag_control_offboard_enabled;

   typedef uint8_t _flag_control_rates_enabled_type;
  _flag_control_rates_enabled_type flag_control_rates_enabled;

   typedef uint8_t _flag_control_attitude_enabled_type;
  _flag_control_attitude_enabled_type flag_control_attitude_enabled;

   typedef uint8_t _flag_control_acceleration_enabled_type;
  _flag_control_acceleration_enabled_type flag_control_acceleration_enabled;

   typedef uint8_t _flag_control_velocity_enabled_type;
  _flag_control_velocity_enabled_type flag_control_velocity_enabled;

   typedef uint8_t _flag_control_position_enabled_type;
  _flag_control_position_enabled_type flag_control_position_enabled;

   typedef uint8_t _flag_control_altitude_enabled_type;
  _flag_control_altitude_enabled_type flag_control_altitude_enabled;

   typedef uint8_t _flag_control_climb_rate_enabled_type;
  _flag_control_climb_rate_enabled_type flag_control_climb_rate_enabled;

   typedef uint8_t _flag_control_termination_enabled_type;
  _flag_control_termination_enabled_type flag_control_termination_enabled;





  typedef boost::shared_ptr< ::mavros_msgs::VehicleControlMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::VehicleControlMode_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleControlMode_

typedef ::mavros_msgs::VehicleControlMode_<std::allocator<void> > VehicleControlMode;

typedef boost::shared_ptr< ::mavros_msgs::VehicleControlMode > VehicleControlModePtr;
typedef boost::shared_ptr< ::mavros_msgs::VehicleControlMode const> VehicleControlModeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::VehicleControlMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::VehicleControlMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::VehicleControlMode_<ContainerAllocator1> & lhs, const ::mavros_msgs::VehicleControlMode_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.flag_armed == rhs.flag_armed &&
    lhs.flag_multicopter_position_control_enabled == rhs.flag_multicopter_position_control_enabled &&
    lhs.flag_control_manual_enabled == rhs.flag_control_manual_enabled &&
    lhs.flag_control_auto_enabled == rhs.flag_control_auto_enabled &&
    lhs.flag_control_offboard_enabled == rhs.flag_control_offboard_enabled &&
    lhs.flag_control_rates_enabled == rhs.flag_control_rates_enabled &&
    lhs.flag_control_attitude_enabled == rhs.flag_control_attitude_enabled &&
    lhs.flag_control_acceleration_enabled == rhs.flag_control_acceleration_enabled &&
    lhs.flag_control_velocity_enabled == rhs.flag_control_velocity_enabled &&
    lhs.flag_control_position_enabled == rhs.flag_control_position_enabled &&
    lhs.flag_control_altitude_enabled == rhs.flag_control_altitude_enabled &&
    lhs.flag_control_climb_rate_enabled == rhs.flag_control_climb_rate_enabled &&
    lhs.flag_control_termination_enabled == rhs.flag_control_termination_enabled;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::VehicleControlMode_<ContainerAllocator1> & lhs, const ::mavros_msgs::VehicleControlMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::VehicleControlMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::VehicleControlMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::VehicleControlMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::VehicleControlMode_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::VehicleControlMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::VehicleControlMode_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::VehicleControlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c419e6544c07c449d39392b01c67d74";
  }

  static const char* value(const ::mavros_msgs::VehicleControlMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c419e6544c07c44ULL;
  static const uint64_t static_value2 = 0x9d39392b01c67d74ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::VehicleControlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/VehicleControlMode";
  }

  static const char* value(const ::mavros_msgs::VehicleControlMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::VehicleControlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Represent Vehicle Control Mode.\n"
"#\n"
"# VEHICLE_CONTROL_MODE message\n"
"\n"
"std_msgs/Header header\n"
"\n"
"bool flag_armed			# synonym for actuator_armed.armed\n"
"\n"
"bool flag_multicopter_position_control_enabled\n"
"\n"
"bool flag_control_manual_enabled		# true if manual input is mixed in\n"
"bool flag_control_auto_enabled			# true if onboard autopilot should act\n"
"bool flag_control_offboard_enabled		# true if offboard control should be used\n"
"bool flag_control_rates_enabled			# true if rates are stabilized\n"
"bool flag_control_attitude_enabled		# true if attitude stabilization is mixed in\n"
"bool flag_control_acceleration_enabled		# true if acceleration is controlled\n"
"bool flag_control_velocity_enabled		# true if horizontal velocity (implies direction) is controlled\n"
"bool flag_control_position_enabled		# true if position is controlled\n"
"bool flag_control_altitude_enabled		# true if altitude is controlled\n"
"bool flag_control_climb_rate_enabled		# true if climb rate is controlled\n"
"bool flag_control_termination_enabled		# true if flighttermination is enabled\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavros_msgs::VehicleControlMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::VehicleControlMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.flag_armed);
      stream.next(m.flag_multicopter_position_control_enabled);
      stream.next(m.flag_control_manual_enabled);
      stream.next(m.flag_control_auto_enabled);
      stream.next(m.flag_control_offboard_enabled);
      stream.next(m.flag_control_rates_enabled);
      stream.next(m.flag_control_attitude_enabled);
      stream.next(m.flag_control_acceleration_enabled);
      stream.next(m.flag_control_velocity_enabled);
      stream.next(m.flag_control_position_enabled);
      stream.next(m.flag_control_altitude_enabled);
      stream.next(m.flag_control_climb_rate_enabled);
      stream.next(m.flag_control_termination_enabled);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleControlMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::VehicleControlMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::VehicleControlMode_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "flag_armed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_armed);
    s << indent << "flag_multicopter_position_control_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_multicopter_position_control_enabled);
    s << indent << "flag_control_manual_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_control_manual_enabled);
    s << indent << "flag_control_auto_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_control_auto_enabled);
    s << indent << "flag_control_offboard_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_control_offboard_enabled);
    s << indent << "flag_control_rates_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_control_rates_enabled);
    s << indent << "flag_control_attitude_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_control_attitude_enabled);
    s << indent << "flag_control_acceleration_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_control_acceleration_enabled);
    s << indent << "flag_control_velocity_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_control_velocity_enabled);
    s << indent << "flag_control_position_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_control_position_enabled);
    s << indent << "flag_control_altitude_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_control_altitude_enabled);
    s << indent << "flag_control_climb_rate_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_control_climb_rate_enabled);
    s << indent << "flag_control_termination_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag_control_termination_enabled);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_VEHICLECONTROLMODE_H
