// Generated by gencpp from file mavros_msgs/ActuatorOutputs.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_ACTUATOROUTPUTS_H
#define MAVROS_MSGS_MESSAGE_ACTUATOROUTPUTS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mavros_msgs
{
template <class ContainerAllocator>
struct ActuatorOutputs_
{
  typedef ActuatorOutputs_<ContainerAllocator> Type;

  ActuatorOutputs_()
    : header()
    , noutputs(0)
    , output()  {
      output.assign(0.0);
  }
  ActuatorOutputs_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , noutputs(0)
    , output()  {
  (void)_alloc;
      output.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _noutputs_type;
  _noutputs_type noutputs;

   typedef boost::array<float, 16>  _output_type;
  _output_type output;





  typedef boost::shared_ptr< ::mavros_msgs::ActuatorOutputs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::ActuatorOutputs_<ContainerAllocator> const> ConstPtr;

}; // struct ActuatorOutputs_

typedef ::mavros_msgs::ActuatorOutputs_<std::allocator<void> > ActuatorOutputs;

typedef boost::shared_ptr< ::mavros_msgs::ActuatorOutputs > ActuatorOutputsPtr;
typedef boost::shared_ptr< ::mavros_msgs::ActuatorOutputs const> ActuatorOutputsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::ActuatorOutputs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::ActuatorOutputs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::ActuatorOutputs_<ContainerAllocator1> & lhs, const ::mavros_msgs::ActuatorOutputs_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.noutputs == rhs.noutputs &&
    lhs.output == rhs.output;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::ActuatorOutputs_<ContainerAllocator1> & lhs, const ::mavros_msgs::ActuatorOutputs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::ActuatorOutputs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::ActuatorOutputs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::ActuatorOutputs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::ActuatorOutputs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::ActuatorOutputs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::ActuatorOutputs_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::ActuatorOutputs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b7facc4274c4dd4e011b928df428755";
  }

  static const char* value(const ::mavros_msgs::ActuatorOutputs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b7facc4274c4dd4ULL;
  static const uint64_t static_value2 = 0xe011b928df428755ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::ActuatorOutputs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/ActuatorOutputs";
  }

  static const char* value(const ::mavros_msgs::ActuatorOutputs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::ActuatorOutputs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Represent Actuator Outputs.\n"
"#\n"
"# ACTUATOR_OUTPUTS message\n"
"\n"
"std_msgs/Header header\n"
"\n"
"uint32 noutputs				# valid outputs\n"
"float32[16] output				# output data, in natural output units\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mavros_msgs::ActuatorOutputs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::ActuatorOutputs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.noutputs);
      stream.next(m.output);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActuatorOutputs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::ActuatorOutputs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::ActuatorOutputs_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "noutputs: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.noutputs);
    s << indent << "output[]" << std::endl;
    for (size_t i = 0; i < v.output.size(); ++i)
    {
      s << indent << "  output[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.output[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_ACTUATOROUTPUTS_H
