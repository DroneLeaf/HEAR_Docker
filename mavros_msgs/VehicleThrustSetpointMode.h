// Generated by gencpp from file mavros_msgs/VehicleThrustSetpointMode.msg
// DO NOT EDIT!


#ifndef MAVROS_MSGS_MESSAGE_VEHICLETHRUSTSETPOINTMODE_H
#define MAVROS_MSGS_MESSAGE_VEHICLETHRUSTSETPOINTMODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavros_msgs
{
template <class ContainerAllocator>
struct VehicleThrustSetpointMode_
{
  typedef VehicleThrustSetpointMode_<ContainerAllocator> Type;

  VehicleThrustSetpointMode_()
    : xyz()  {
      xyz.assign(0.0);
  }
  VehicleThrustSetpointMode_(const ContainerAllocator& _alloc)
    : xyz()  {
  (void)_alloc;
      xyz.assign(0.0);
  }



   typedef boost::array<float, 3>  _xyz_type;
  _xyz_type xyz;





  typedef boost::shared_ptr< ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleThrustSetpointMode_

typedef ::mavros_msgs::VehicleThrustSetpointMode_<std::allocator<void> > VehicleThrustSetpointMode;

typedef boost::shared_ptr< ::mavros_msgs::VehicleThrustSetpointMode > VehicleThrustSetpointModePtr;
typedef boost::shared_ptr< ::mavros_msgs::VehicleThrustSetpointMode const> VehicleThrustSetpointModeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator1> & lhs, const ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator2> & rhs)
{
  return lhs.xyz == rhs.xyz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator1> & lhs, const ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mavros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a14e115b7c54d12a98ac59b965cebc44";
  }

  static const char* value(const ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa14e115b7c54d12aULL;
  static const uint64_t static_value2 = 0x98ac59b965cebc44ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavros_msgs/VehicleThrustSetpointMode";
  }

  static const char* value(const ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"float32[3] xyz          # thrust setpoint along X, Y, Z body axis [-1, 1]\n"
;
  }

  static const char* value(const ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xyz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleThrustSetpointMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavros_msgs::VehicleThrustSetpointMode_<ContainerAllocator>& v)
  {
    s << indent << "xyz[]" << std::endl;
    for (size_t i = 0; i < v.xyz.size(); ++i)
    {
      s << indent << "  xyz[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.xyz[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVROS_MSGS_MESSAGE_VEHICLETHRUSTSETPOINTMODE_H
